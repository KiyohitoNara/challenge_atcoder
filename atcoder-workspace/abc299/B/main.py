#!/usr/bin/env python3
import sys


def solve(N: int, T: int, C: "List[int]", R: "List[int]"):
    max_i = 0
    max_r = 0

    for i, (c, r) in enumerate(zip(C, R)):
        if c == T and r > max_r:
            max_i = i + 1
            max_r = r

    if max_i == 0:
        solve(N, C[0], C, R)
    else:
        print(max_i)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    R = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T, C, R)


if __name__ == '__main__':
    main()
